{
    "Mui theme provider": {
        "prefix": "muithemeprovider",
        "body": [
            "'use client'",
            "",
            "import { ThemeProvider, createTheme, StyledEngineProvider } from '@mui/material/styles';",
            "import { PropsWithChildren } from \"react\"",
            "",
            "const theme = createTheme({",
            "})",
            "",
            "export default function MuiThemeProvider({children}: PropsWithChildren) {",
            "  return (",
            "\t<StyledEngineProvider injectFirst>",
            "\t  <ThemeProvider theme={theme}>",
            "\t\t  {children}",
            "\t  </ThemeProvider>",
            "\t</StyledEngineProvider>",
            "  )",
            "}",
            ""
        ]
    },
    "Mui react hook form": {
        "prefix": "muirhform",
        "body": [
            "'use client'",
            "import React, { useState } from 'react'",
            "import { useForm } from 'react-hook-form'",
            "import Button from '@mui/material/Button'",
            "import Typography from '@mui/material/Typography'",
            "import { Alert, Backdrop, Card, CardActions, CardContent, CardHeader, CircularProgress, Grid } from '@mui/material'",
            "",
            "export type ${TM_FILENAME_BASE}FormFields = {",
            "\tname: string;",
            "\tsurname: string;",
            "\temail: string;",
            "\tpassword: string;",
            "};",
            "",
            "",
            "export default function ${TM_FILENAME_BASE}Form() {",
            "\tconst { register, handleSubmit } = useForm<${TM_FILENAME_BASE}FormFields>()",
            "\tconst [loading, setLoading] = useState(false)",
            "\tconst [error, setError] = useState('')",
            "",
            "\tconst onSubmit = handleSubmit(async (values) => {",
            "\t\tconsole.log('valores', values)",
            "\t\tsetLoading(true)",
            "\t\tsetError('')",
            "\t\ttry {",
            "\t\t\t",
            "\t\t} catch (error) {",
            "\t\t\tconsole.log(error)",
            "\t\t} finally {",
            "\t\t\tsetLoading(false)",
            "\t\t}",
            "\t})",
            "",
            "\treturn (",
            "\t\t<Card sx={{ position: 'relative' }} component={'form'} onSubmit={onSubmit}>",
            "\t\t\t<CardHeader title=\"${1:titleform}\" />",
            "\t\t\t<CardContent>",
            "\t\t\t\t<Backdrop open={loading}",
            "\t\t\t\t\tsx={(theme) => ({ color: '#fff', zIndex: theme.zIndex.drawer + 1, position: 'absolute' })}",
            "\t\t\t\t>",
            "\t\t\t\t\t<CircularProgress style={{ color: 'white' }} />",
            "\t\t\t\t</Backdrop>",
            "\t\t\t\t<Grid container spacing={2}>",
            "\t\t\t\t\t<Grid size={12}>",
            "\t\t\t\t\t\t{error && <Alert severity='error'>",
            "\t\t\t\t\t\t\t{error}",
            "\t\t\t\t\t\t</Alert>}",
            "\t\t\t\t\t</Grid>",
            "\t\t\t\t</Grid>",
            "\t\t\t</CardContent>",
            "\t\t\t<CardActions sx={{ display: 'flex', justifyContent: 'space-between', placeItems: 'center' }}>",
            "\t\t\t\t<Typography variant=\"body1\" color=\"initial\">",
            "\t\t\t\t\t<Button variant=\"text\" href='/'>",
            "\t\t\t\t\t\t${3:linktoother}",
            "\t\t\t\t\t</Button>",
            "\t\t\t\t</Typography>",
            "\t\t\t\t<Button variant=\"contained\" type='submit' loading={loading} disableElevation>",
            "\t\t\t\t\t${2:submitbuttontext}",
            "\t\t\t\t</Button>",
            "\t\t\t</CardActions>",
            "\t\t</Card>",
            "\t)",
            "}",
            ""
        ]
    }
}